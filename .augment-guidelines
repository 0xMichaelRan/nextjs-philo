# Augment Guidelines - Frontend (Next.js)

## Project Overview
This is the frontend of an AI-powered movie analysis video generation platform built with Next.js, TypeScript, and Tailwind CSS.

## Development Setup
```bash
cd nextjs-philo && npm run dev
```
Frontend runs on port 3000 with hot reload enabled.

## Architecture & Patterns

### Tech Stack
- **Framework**: Next.js 14+ with App Router
- **Language**: TypeScript
- **Styling**: Tailwind CSS
- **UI Components**: shadcn/ui
- **State Management**: React Context API + Zustand (preferred for complex state)

### Key Contexts
- `LanguageContext` - Bilingual support (zh/en) with translations
- `ThemeContext` - Light/dark mode switching
- `AuthContext` - User authentication and VIP status

### File Structure
```
app/
├── (pages)/           # App router pages
├── components/        # Reusable components
├── contexts/          # React contexts
├── lib/              # Utilities
├── hooks/            # Custom hooks
└── globals.css       # Global styles
```

### Component Patterns
1. **Theme-aware components**: Use `useTheme()` hook and conditional classes
2. **Bilingual support**: Use `useLanguage()` hook and `t()` function
3. **shadcn/ui**: Prefer shadcn components over custom UI elements
4. **Responsive design**: Mobile-first approach with Tailwind

### Key Features to Maintain
- **Multi-language**: All text must support Chinese and English
- **Theme switching**: Components must work in light/dark modes
- **VIP features**: Proper VIP/SVIP gating for premium features (FREE: 1 custom voice, VIP: 3 custom voices, SVIP: 10 custom voices)
- **Audio handling**: Voice selection and custom voice recording with "限免"/"Limited Time" tags for free users
- **Real-time updates**: Server-Sent Events (SSE) for instant job status and notifications with user-specific targeting
- **Video playbook**: Completed videos served from backend with proper authentication
- **Phone number authentication**: Primary auth method with verification codes
- **Password reset**: Phone-based password reset with verification
- **Custom voice limits**: Fetch max_custom_voices from backend API, not hardcoded values

### Development Guidelines
1. Always test both language modes (zh/en)
2. Verify theme switching works correctly
3. Ensure VIP features are properly gated
4. Use TypeScript strictly - no `any` types
5. Follow existing naming conventions for translations keys
6. Test responsive design on mobile devices
7. Prefer Zustand + localStorage over React Context for complex state
8. Only clear flowState when selecting new movie (not on every navigation)
9. Redirect to auth page on 401 errors then return to previous page
10. Use SSE for real-time updates instead of HTTP polling
11. Filter completed jobs from job-pending page (show in video-generation instead)
12. Use resolution selection with VIP restrictions (480p free, 720p/1080p VIP)

### API Integration
- **Backend API**: `localhost:8009` (main API)
- Use proper error handling for API calls
- Implement loading states for async operations
- Handle authentication tokens properly
- Use `apiConfig.makeAuthenticatedRequest()` for authenticated calls

### Common Patterns
```typescript
// Theme usage
const { theme } = useTheme()
const themeClasses = theme === 'light' ? 'bg-white text-black' : 'bg-gray-900 text-white'

// Language usage  
const { language, t } = useLanguage()
const text = language === 'zh' ? '中文文本' : 'English text'
// Or use translation keys
const text = t('nav.home')

// VIP checking
const { user } = useAuth()
const isVip = user?.is_vip

// SSE real-time updates
const { onJobUpdate, onNotificationUpdate } = useRealtimeNotifications()

useEffect(() => {
  const unsubscribe = onJobUpdate((data) => {
    // Handle job status updates
    console.log('Job update:', data)
  })
  return unsubscribe
}, [onJobUpdate])
```

## Completion Notification System

The backend uses a sophisticated completion notification system for video job processing:

### Architecture
- **AMQP Consumer**: `completion_consumer.py` processes job completion messages from python-renderer
- **User-Specific Targeting**: Each user only receives notifications for their own jobs via `job.user_id`
- **Real-time Delivery**: SSE-based system with per-user connection management in `realtime_notifications.py`
- **Queue Metrics**: Provides real-time `pending_jobs_count` and `estimated_processing_time` for wait time calculation

### Key Features
- **Bilingual Notifications**: Automatic English/Chinese notification creation
- **Connection Management**: Automatic cleanup of disconnected SSE clients
- **Estimated Wait Times**: Dynamic calculation based on queue metrics (not hardcoded 60 minutes)
- **Fallback Mechanisms**: Auto-refresh every 15 seconds as backup to SSE
- **Scalable Design**: Async operations, connection pooling, efficient for multiple concurrent users

### Data Flow
1. python-renderer sends completion notification via AMQP
2. `completion_consumer.py` processes message and updates database
3. Real-time notification sent to specific user via SSE
4. Frontend receives job update with queue metrics
5. UI displays calculated estimated waiting time